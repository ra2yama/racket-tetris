#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 83 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1           0 3378 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 139
(
 #"#reader(lib \"htdp-advanced-reader.ss\" \"lang\")((modname |Raphael "
 #"Yamamoto and Alex Li-Tetris Game|) (read-case-sensitive #t) (teachpa"
 #"cks ((l"
) 0 0 4 3 311
(
 #"ib \"image.rkt\" \"teachpack\" \"2htdp\") (lib \"batch-io.rkt\" \"te"
 #"achpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpack\" \"2htdp\"))"
 #") (htdp-settings #(#t constructor repeating-decimal #t #t none #f (("
 #"lib \"image.rkt\" \"teachpack\" \"2htdp\") (lib \"batch-io.rkt\" \"t"
 #"eachpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpack\" \"2htdp\")"
 #") #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 19 #";; Our Tetris Game "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; Recursive Template"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 4 #"cond"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"[("
0 0 17 3 6 #"empty?"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 2 #") "
0 0 17 3 5 #"empty"
0 0 17 3 1 #"]"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"["
0 0 17 3 4 #"else"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 2 #" ("
0 0 17 3 4 #"fist"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 3 #") ("
0 0 17 3 8 #"function"
0 0 17 3 2 #" ("
0 0 17 3 15 #"rest list)))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; Grid"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; a 10 by 20 grid, each block"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #") "
0 0 17 3 35 #";; size of individual block in grid"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"TOTAL-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 3 #")) "
0 0 17 3 21 #";; Width of end image"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"TOTAL-HEIGHT"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 3 #")) "
0 0 17 3 20 #";;Width of end image"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"dimensions"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;dimensions of the grid"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;my-range : number number function -> list"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;  returns a list of numbers that have been passed77"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;  through the function and iterated upon"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;example : (my-range 1 5 (lambda (n) (* n 10))) -> (list 10 20 30 4"
 #"0 50)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"my-range"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 3 #") ("
0 0 14 3 8 #"my-range"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;join-lists: list list -> list"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;  joins two lists"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;examples: (join-lists (list 1 543 5 23 2 2) (list 2 54 3 3 2 2 222"
 #"22 2 43 5))"
) 0 0 24 29 1 #"\n"
0 0 17 3 52 #";;-> (list 1 543 5 23 2 2 2 54 3 3 2 2 22222 2 43 5)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"join-lists"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 3 #") ("
0 0 14 3 10 #"join-lists"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"join-lists"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #") "
0 0 14 3 5 #"list2"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Tetra block : Struct which contains the color of the tetra"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; the center of the tetra in which it rotates, and the rotation mod"
 #"e;"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";; if the rotation point is at a corner of the block or if it is "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 2 #" ("
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 6 #"center"
0 0 24 3 1 #" "
0 0 14 3 14 #"center-corner?"
0 0 24 3 1 #" "
0 0 14 3 6 #"blocks"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"O-tetra"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"L-tetra"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"purple\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"J-tetra"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"cyan\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"I-tetra"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"darkblue\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"T-tetra"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"Z-tetra"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pink\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-tetra"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; List of Posn in tetris (LoPit)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; List of tetras and their indexes (place in the list)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 7 #"O-tetra"
0 0 24 3 2 #")("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 7 #"L-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 7 #"J-tetra"
0 0 24 3 2 #")("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 7 #"I-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 7 #"T-tetra"
0 0 24 3 2 #")("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 7 #"Z-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-tetra"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; tetra-by-number: Number LoPit-> Tetra"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; it takes in a number and returns a tetra"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; example: (tetra-by-number 1)-> O-tetra"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"array index out of bounds\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;GRID MANAGEMENT"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"gridX"
0 0 24 3 2 #" ("
0 0 14 3 8 #"my-range"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;x positions of grid lines"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"gridY"
0 0 24 3 2 #" ("
0 0 14 3 8 #"my-range"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;y positions of grid lines"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;create-grid-image : list list grid-size-> image"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;  returns a grid image based on lists given"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"create-grid-image"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"H"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"add-line"
0 0 24 3 2 #" ("
0 0 14 3 17 #"create-grid-image"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"H"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 14 3 1 #"W"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"add-line"
0 0 24 3 2 #" ("
0 0 14 3 17 #"create-grid-image"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 1 #"W"
0 0 24 3 1 #" "
0 0 14 3 1 #"H"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"H"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"grid-image"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"create-grid-image"
0 0 24 3 1 #" "
0 0 14 3 5 #"gridX"
0 0 24 3 1 #" "
0 0 14 3 5 #"gridY"
0 0 24 3 1 #" "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 14 3 11 #"TOTAL-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 12 #"TOTAL-HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;BIG BANG STUFF"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Block Struct"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; contains a color and position"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #" ("
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;World Struct"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; contains the matrix, the score, and the active tetra"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; (the one that is falling)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 6 #"blocks"
0 0 24 3 1 #" "
0 0 14 3 12 #"active-tetra"
0 0 24 3 1 #" "
0 0 14 3 5 #"score"
0 0 24 3 1 #" "
0 0 14 3 8 #"interval"
0 0 24 3 1 #" "
0 0 14 3 4 #"time"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;move-tetra: tetra posn -> tetra"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";;  moves a tetra's blocks and center point by given amount"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;(move-tetra (make-tetra \"green\" (make-posn 0.5 0.5) true"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;                            (list (make-posn 0 0) (make-posn 1 0)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;                               (make-posn 0 1)"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;                                    (make-posn 1 1))) (make-posn 0"
 #" 0)) ->"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #";;(make-tetra \"green\" (make-posn 0.5 0.5) true"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;                          (list (make-posn 0 0) (make-posn 1 0)"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;                               (make-posn 0 1) (make-posn 1 1)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"move-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 9 #"posn-amnt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"posn-add"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 9 #"posn-amnt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 20 #"tetra-center-corner?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 13 #"add-posn-list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 14 3 9 #"posn-amnt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;add-posn-list: listofposns posn -> list"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;  adds posn to each posn of list"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;(list (posn 10 1) (posn 2 2)) (posn 0 0) -> (list (posn 10 1) (pos"
 #"n 2 2))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"add-posn-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"posn-add"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 7 #"my-posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"add-posn-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 7 #"my-posn"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;posn-add : posn posn -> posn"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;  takes posns and adds them together"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; (posn 1 0) (posn 0 0) -> (posn 1 0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"posn-add"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-pen"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"round\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"round\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;pen for drawing inside blocks"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;grid->coord : posn number -> posn"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;  turns grid coordinates into image coordinates"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;(grid->coord )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"grid->coord"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #") "
0 0 14 3 4 #"size"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #") "
0 0 14 3 4 #"size"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;make-tetra-image : tetra -> image"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;  makes an image representation of a tetra"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-tetra-image"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 5 #"image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 14 3 5 #"image"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 7 #"overlay"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"crop"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 6 #"posn-x"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"grid->coord"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 6 #"posn-y"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"grid->coord"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")) "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 16 #"make-tetra-image"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 20 #"tetra-center-corner?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"image"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; make-block-images: world image-> image"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; takes in a worldstate and an image and returns an image"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-blocks-image"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 14 3 1 #"i"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-blocks-image"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-interval"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 11 #"place-image"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 7 #"overlay"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"crop"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"block-color"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 7 #"))))) ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"grid->coord"
0 0 24 3 2 #" ("
0 0 14 3 10 #"block-posn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"grid->coord"
0 0 24 3 2 #" ("
0 0 14 3 10 #"block-posn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))) "
0 0 14 3 10 #"BLOCK-SIZE"
0 0 24 3 3 #")) "
0 0 14 3 1 #"i"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Draw Function : world -> image"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;  given worldstate, returns an image"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"make-tetra-image"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 17 #"make-blocks-image"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 10 #"grid-image"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;block-rotate-ccw: Posn Block-> Block"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; takes in a posn and a block and rotates the block by"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; counterclockwise 90 degrees (around the posn)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"block-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;rotate-tetra: tetra -> tetra"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;  rotates tetra ccw by 90 degrees"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;(make-tetra \"green\" (make-posn 1 1) true (list (make-posn 0 0)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;(make-posn 1 0) (make-posn 0 1) (make-posn 1 1)))"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";;-> (make-tetra \"green\" (make-posn 1 1) true (list (make-posn 0 0"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";;(make-posn 1 0) (make-posn 0 1) (make-posn 1 1)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rotate-tetra"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-color"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 20 #"tetra-center-corner?"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 19 #"rotate-tetra-blocks"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 3 #") ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;rotate-tetra-blocks : list of blocks -> returns list of blocks (ak"
 #"a a posns)"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";;  turns things counterclockwise by 90 degrees"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;(make-tetra \"green\" (make-posn 1 1) true (list (make-posn 0 0)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;(make-posn 1 0) (make-posn 0 1) (make-posn 1 1)))"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #";;-> (make-tetra \"green\" (make-posn 1 1) true (list (make-posn 0 0"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";;(make-posn 1 0) (make-posn 0 1) (make-posn 1 1)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"rotate-tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 6 #"center"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 16 #"block-rotate-ccw"
0 0 24 3 1 #" "
0 0 14 3 6 #"center"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 19 #"rotate-tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 6 #"center"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;in-left? : tetra Number -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;  if tetra is inside the left side of the image, return true"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;(I-tetra) -> true"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-left?"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-left?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-color"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 20 #"tetra-center-corner?"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"width"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;in-right? : tetra Number -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;  if tetra is inside the right side of the image, return true"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;(I-tetra) -> true"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-right?"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 5 #"))) ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-right?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-color"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 20 #"tetra-center-corner?"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"width"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;key: world key -> world"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;  moves active tetra"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;(color center center-corner? blocks"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 18 #"change-world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 10 #"move-tetra"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 2 #"if"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 9 #"in-right?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 18 #"change-world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 10 #"move-tetra"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 2 #"if"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 8 #"in-left?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 5 #"WIDTH"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 16 #"update-tetra-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 18 #"change-world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rotate-tetra"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 25 #";;moves counter clockwise"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 18 #"change-world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rotate-tetra"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 18 #"change-world-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rotate-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 12 #"rotate-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 12 #"rotate-tetra"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";; to turn clockwise"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"]))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;change-world-tetra : world tetra -> world"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;  changes only the world tetra"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"change-world-tetra"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #" "
0 0 14 3 5 #"tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"world-blocks"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 5 #"tetra"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"world-interval"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Tetra->Block"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; takes in a tetra and returns a block"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;example: (O-tetra)->(list (block \"green\" (posn 1 0)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"tetra->blocks"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 11 #"tetra-color"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"tetra->blocks"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tetra-color"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 12 #"tetra-center"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 20 #"tetra-center-corner?"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 8 #")))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"lowest-posn-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"val"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"lowest-posn-list"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 16 #"lowest-posn-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-list"
0 0 24 3 2 #") "
0 0 14 3 3 #"val"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"bottom?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 16 #"lowest-posn-list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tetra-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 6 #"-inf.0"
0 0 24 3 1 #" "
0 0 21 3 6 #"-inf.0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 17 3 53 #";; checks if the tetra has hit the bottom, unfinished"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;update-tetra-pos : world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;  changes tetra position down one"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"update-tetra-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bottom?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"join-lists"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"tetra->blocks"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 14 #"world-interval"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))] "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")("
0 0 14 3 10 #"move-tetra"
0 0 24 3 2 #" ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-interval"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;tick : world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; every x frames, update the tetra position"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tick"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-interval"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 16 #"update-tetra-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 12 #"world-blocks"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 18 #"world-active-tetra"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 11 #"world-score"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 14 #"world-interval"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-time"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 6 #"-10000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 4 #"tick"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"on-draw"
0 0 24 3 1 #" "
0 0 14 3 4 #"draw"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;TEST SECTION"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;my-range test"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"my-range"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #" "
0 0 21 3 3 #"160"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"my-range"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 4 #"-100"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 3 #"-40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;join-lists test"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"join-lists"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"543"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"54"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 5 #"22222"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"43"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"543"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"54"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 5 #"22222"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"43"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;draw test"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 5 #"-1000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"scale"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 6           4 21 6879
(
 #"(#(struct:scale 1/10 1/10 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 80 0 #(struct:o"
 #"verlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(s"
 #"truct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struc"
 #"t:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) o"
 #"utline #(struct:pen \"black\" 2 solid round round)))))) #(struct:tra"
 #"nslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pull"
 #"ed-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"g"
 #"reen\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0"
 #") #(struct:point 400 0) #(struct:point 400 800) #(struct:point 0 800"
 #")) #(struct:translate 0 0 #(struct:overlay #(struct:translate 120 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:poin"
 #"t 0 0) #(struct:point 40 0) #(struct:point 40 40) #(struct:point 0 4"
 #"0)) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 "
 #"0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 "
 #"40 0 0)) outline #(struct:pen \"black\" 2 solid round round)))))) #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(s"
 #"truct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0"
 #")) 255 \"green\"))))) #(struct:translate 0 0 #(struct:crop (#(struct"
 #":point 0 0) #(struct:point 400 0) #(struct:point 400 800) #(struct:p"
 #"oint 0 800)) #(struct:translate 0 0 #(struct:overlay #(struct:transl"
 #"ate 80 40 #(struct:overlay #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 40 0) #(struct:point 40 40) #(struct"
 #":point 0 40)) #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-po"
 #"int 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round roun"
 #"d)))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 "
 #"0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 "
 #"0 0 40 0 0)) 255 \"green\"))))) #(struct:translate 0 0 #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 400 0) #(struct:point 400 800) "
 #"#(struct:point 0 800)) #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 120 40 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:crop (#(struct:point 0 0) #(struct:point 40 0) #(struct:point 40 4"
 #"0) #(struct:point 0 40)) #(struct:translate 0 0 #(struct:translate 0"
 #" 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pul"
 #"led-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struc"
 #"t:pulled-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid"
 #" round round)))))) #(struct:translate 0 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pull"
 #"ed-point 0 0 0 40 0 0)) 255 \"green\"))))) #(struct:translate 0 0 #("
 #"struct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct"
 #":point 40 0) #(struct:point 40 800) \"black\") #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:line-segment #(struct:point 80 0) #(stru"
 #"ct:point 80 800) \"black\") #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:line-segment #(struct:point 120 0) #(struct:point 120 800) "
 #"\"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-seg"
 #"ment #(struct:point 160 0) #(struct:point 160 800) \"black\") #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:poi"
 #"nt 200 0) #(struct:point 200 800) \"black\") #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:line-segment #(struct:point 240 0) #(struc"
 #"t:point 240 800) \"black\") #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:line-segment #(struct:point 280 0) #(struct:point 280 800) "
 #"\"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-seg"
 #"ment #(struct:point 320 0) #(struct:point 320 800) \"black\") #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:poi"
 #"nt 360 0) #(struct:point 360 800) \"black\") #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:line-segment #(struct:point 0 40) #(struct"
 #":point 400 40) \"black\") #(struct:translate 0 0 #(struct:overlay #("
 #"struct:line-segment #(struct:point 0 80) #(struct:point 400 80) \"bl"
 #"ack\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment"
 #" #(struct:point 0 120) #(struct:point 400 120) \"black\") #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0"
 #" 160) #(struct:point 400 160) \"black\") #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:line-segment #(struct:point 0 200) #(struct:po"
 #"int 400 200) \"black\") #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:line-segment #(struct:point 0 240) #(struct:point 400 240) \"bl"
 #"ack\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment"
 #" #(struct:point 0 280) #(struct:point 400 280) \"black\") #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0"
 #" 320) #(struct:point 400 320) \"black\") #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:line-segment #(struct:point 0 360) #(struct:po"
 #"int 400 360) \"black\") #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:line-segment #(struct:point 0 400) #(struct:point 400 400) \"bl"
 #"ack\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment"
 #" #(struct:point 0 440) #(struct:point 400 440) \"black\") #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0"
 #" 480) #(struct:point 400 480) \"black\") #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:line-segment #(struct:point 0 520) #(struct:po"
 #"int 400 520) \"black\") #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:line-segment #(struct:point 0 560) #(struct:point 400 560) \"bl"
 #"ack\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment"
 #" #(struct:point 0 600) #(struct:point 400 600) \"black\") #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0"
 #" 640) #(struct:point 400 640) \"black\") #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:line-segment #(struct:point 0 680) #(struct:po"
 #"int 400 680) \"black\") #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:line-segment #(struct:point 0 720) #(struct:point 400 720) \"bl"
 #"ack\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment"
 #" #(struct:point 0 760) #(struct:point 400 760) \"black\") #(struct:t"
 #"ranslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #("
 #"struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 20 0 "
 #"0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"white\")))))))))))))))"
 #")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) #(struc"
 #"t:bb 40 80 8) #f)"
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"scale"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 5 #"-1000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"scale"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 6           4 21 6886
(
 #"(#(struct:scale 1/10 1/10 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 160 40 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #"
 #"(struct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(str"
 #"uct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0))"
 #" outline #(struct:pen \"black\" 2 solid round round)))))) #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pu"
 #"lled-point 0 0 40 40 0 0) #(struct"
 #":pulled-point 0 0 0 40 0 0)) 255 \"purple\"))))) #(struct:translate "
 #"0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 400 0) #(struc"
 #"t:point 400 800) #(struct:point 0 800)) #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 200 40 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 40 0) #("
 #"struct:point 40 40) #(struct:point 0 40)) #(struct:translate 0 0 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 "
 #"0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 4"
 #"0 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outline #(struct:pen "
 #"\"black\" 2 solid round round)))))) #(struct:translate 0 0 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0"
 #" 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"purple\"))))) #(struc"
 #"t:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 40"
 #"0 0) #(struct:point 400 800) #(struct:point 0 800)) #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:translate 240 40 #(struct:overlay #"
 #"(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:po"
 #"int 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(struct:trans"
 #"late 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled"
 #"-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outline #"
 #"(struct:pen \"black\" 2 solid round round)))))) #(struct:translate 0"
 #" 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point"
 #" 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"purple\")"
 #")))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(str"
 #"uct:point 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(st"
 #"ruct:translate 0 0 #(struct:overlay #(struct:translate 240 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) "
 #"#(struct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(s"
 #"truct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(st"
 #"ruct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)"
 #") outline #(struct:pen \"black\" 2 solid round round)))))) #(struct:"
 #"translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:p"
 #"ulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 "
 #"\"purple\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:line-segment #(struct:point 40 0) #(struct:point"
 #" 40 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct"
 #":line-segment #(struct:point 80 0) #(struct:point 80 800) \"black\")"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 120 0) #(struct:point 120 800) \"black\") #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:line-segment #(struct:point 160 0) "
 #"#(struct:point 160 800) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 200 0) #(struct:point 20"
 #"0 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 240 0) #(struct:point 240 800) \"black\")"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 280 0) #(struct:point 280 800) \"black\") #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:line-segment #(struct:point 320 0) "
 #"#(struct:point 320 800) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 360 0) #(struct:point 36"
 #"0 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 0 40) #(struct:point 400 40) \"black\") #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(struc"
 #"t:point 0 80) #(struct:point 400 80) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 120) #(st"
 #"ruct:point 400 120) \"black\") #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 0 160) #(struct:point 400 16"
 #"0) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-"
 #"segment #(struct:point 0 200) #(struct:point 400 200) \"black\") #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 0 240) #(struct:point 400 240) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 280) #(st"
 #"ruct:point 400 280) \"black\") #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 0 320) #(struct:point 400 32"
 #"0) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-"
 #"segment #(struct:point 0 360) #(struct:point 400 360) \"black\") #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 0 400) #(struct:point 400 400) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 440) #(st"
 #"ruct:point 400 440) \"black\") #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 0 480) #(struct:point 400 48"
 #"0) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-"
 #"segment #(struct:point 0 520) #(struct:point 400 520) \"black\") #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 0 560) #(struct:point 400 560) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 600) #(st"
 #"ruct:point 400 600) \"black\") #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 0 640) #(struct:point 400 64"
 #"0) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-"
 #"segment #(struct:point 0 680) #(struct:point 400 680) \"black\") #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 0 720) #(struct:point 400 720) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 760) #(st"
 #"ruct:point 400 760) \"black\") #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 20 0 0) #(struct:pulled-point 0 "
 #"0 0 20 0 0)) 255 \"white\"))))))))))))))))))))))))))))))))))))))))))"
 #"))))))))))))))))))))))))))))))))) #(struct:bb 40 80 8) #f)"
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 5 #"-1000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"scale"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 6           4 21 6878
(
 #"(#(struct:scale 1/10 1/10 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 160 40 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #"
 #"(struct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(str"
 #"uct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0))"
 #" outline #(struct:pen \"black\" 2 solid round round)))))) #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pu"
 #"lled-point 0 0 40 40 0 0) #(struct"
 #":pulled-point 0 0 0 40 0 0)) 255 \"cyan\"))))) #(struct:translate 0 "
 #"0 #(struct:crop (#(struct:point 0 0) #(struct:point 400 0) #(struct:"
 #"point 400 800) #(struct:point 0 800)) #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 200 40 #(struct:overlay #(struct:transl"
 #"ate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 40 0) #(st"
 #"ruct:point 40 40) #(struct:point 0 40)) #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 "
 #"0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 "
 #"40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outline #(struct:pen \""
 #"black\" 2 solid round round)))))) #(struct:translate 0 0 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(s"
 #"truct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0"
 #") #(struct:pulled-point 0 0 0 40 0 0)) 255 \"cyan\"))))) #(struct:tr"
 #"anslate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 400 0)"
 #" #(struct:point 400 800) #(struct:point 0 800)) #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:translate 240 40 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"40 0) #(struct:point 40 40) #(struct:point 0 40)) #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outline #(str"
 #"uct:pen \"black\" 2 solid round round)))))) #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0"
 #" 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"cyan\"))))) #"
 #"(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:po"
 #"int 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 160 0 #(struct:over"
 #"lay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(stru"
 #"ct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(struct:"
 #"translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:p"
 #"ulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outl"
 #"ine #(struct:pen \"black\" 2 solid round round)))))) #(struct:transl"
 #"ate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-"
 #"point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"cyan"
 #"\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 40 0) #(struct:point 40 800)"
 #" \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-se"
 #"gment #(struct:point 80 0) #(struct:point 80 800) \"black\") #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:poin"
 #"t 120 0) #(struct:point 120 800) \"black\") #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:line-segment #(struct:point 160 0) #(struct"
 #":point 160 800) \"black\") #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:line-segment #(struct:poin"
 #"t 200 0) #(struct:point 200 800) \"black\") #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:line-segment #(struct:point 240 0) #(struct"
 #":point 240 800) \"black\") #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:line-segment #(struct:poin"
 #"t 280 0) #(struct:point 280 800) \"black\") #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:line-segment #(struct:point 320 0) #(struct"
 #":point 320 800) \"black\") #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:line-segment #(struct:poin"
 #"t 360 0) #(struct:point 360 800) \"black\") #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:line-segment #(struct:point 0 40) #(struct:"
 #"point 400 40) \"black\") #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:line-segment #(struct:point 0 80) #(struct:point 400 80) \"bla"
 #"ck\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment "
 #"#(struct:point 0 120) #(struct:point 400 120) \"black\") #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 "
 #"160) #(struct:point 400 160) \"black\") #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:line-segment #(struct:point 0 200) #(struct:poi"
 #"nt 400 200) \"black\") #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:line-segment #(struct:point 0 240) #(struct:point 400 240) \"bla"
 #"ck\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment "
 #"#(struct:point 0 280) #(struct:point 400 280) \"black\") #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 "
 #"320) #(struct:point 400 320) \"black\") #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:line-segment #(struct:point 0 360) #(struct:poi"
 #"nt 400 360) \"black\") #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:line-segment #(struct:point 0 400) #(struct:point 400 400) \"bla"
 #"ck\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment "
 #"#(struct:point 0 440) #(struct:point 400 440) \"black\") #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 "
 #"480) #(struct:point 400 480) \"black\") #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:line-segment #(struct:point 0 520) #(struct:poi"
 #"nt 400 520) \"black\") #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:line-segment #(struct:point 0 560) #(struct:point 400 560) \"bla"
 #"ck\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment "
 #"#(struct:point 0 600) #(struct:point 400 600) \"black\") #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 "
 #"640) #(struct:point 400 640) \"black\") #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:line-segment #(struct:point 0 680) #(struct:poi"
 #"nt 400 680) \"black\") #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:line-segment #(struct:point 0 720) #(struct:point 400 720) \"bla"
 #"ck\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment "
 #"#(struct:point 0 760) #(struct:point 400 760) \"black\") #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(s"
 #"truct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 20 0 0"
 #") #(struct:pulled-point 0 0 0 20 0 0)) 255 \"white\"))))))))))))))))"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) #(struct"
 #":bb 40 80 8) #f)"
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 5 #"-1000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"scale"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 6           4 21 6891
(
 #"(#(struct:scale 1/10 1/10 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 160 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #("
 #"struct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(stru"
 #"ct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) "
 #"outline #(struct:pen \"black\" 2 solid round round)))))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pul"
 #"led-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \""
 #"darkblue\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point"
 #" 0 0) #(struct:point 400 0) #(struct:point 400 800) #(struct:point 0"
 #" 800)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 20"
 #"0 0 #(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:"
 #"point 0 0) #(struct:point 40 0) #(struct:point 40 40) #(struct:point"
 #" 0 40)) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 "
 #"0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 "
 #"0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round round)))))"
 #") #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0)"
 #" #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40"
 #" 0 0)) 255 \"darkblue\"))))) #(struct:translate 0 0 #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 400 0) #(struct:point 400 800) #(s"
 #"truct:point 0 800)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 240 0 #(struct:overlay #(struct:translate 0 0 #(struct:cr"
 #"op (#(struct:point 0 0) #(struct:point 40 0) #(struct:point 40 40) #"
 #"(struct:point 0 40)) #(struct:translate 0 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pu"
 #"lled-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid rou"
 #"nd round)))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point "
 #"0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-p"
 #"oint 0 0 0 40 0 0)) 255 \"darkblue\"))))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 400 0) #(struct:point"
 #" 400 800) #(struct:point 0 800)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 280 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:crop (#(struct:point 0 0) #(struct:point 40 0) #(struct:p"
 #"oint 40 40) #(struct:point 0 40)) #(struct:translate 0 0 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(s"
 #"truct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0"
 #") #(struct:pulled-point 0 0 0 40 "
 #"0 0)) outline #(struct:pen \"black\" 2 solid round round)))))) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(stru"
 #"ct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) "
 #"255 \"darkblue\"))))) #(struct:translate 0 0 #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:line-segment #(struct:point 40 0) #(struct"
 #":point 40 800) \"black\") #(struct:translate 0 0 #(struct:overlay #("
 #"struct:line-segment #(struct:point 80 0) #(struct:point 80 800) \"bl"
 #"ack\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment"
 #" #(struct:point 120 0) #(struct:point 120 800) \"black\") #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 1"
 #"60 0) #(struct:point 160 800) \"black\") #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:line-segment #(struct:point 200 0) #(struct:po"
 #"int 200 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:line-segment #(struct:point 240 0) #(struct:point 240 800) \"bl"
 #"ack\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment"
 #" #(struct:point 280 0) #(struct:point 280 800) \"black\") #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 3"
 #"20 0) #(struct:point 320 800) \"black\") #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:line-segment #(struct:point 360 0) #(struct:po"
 #"int 360 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:line-segment #(struct:point 0 40) #(struct:point 400 40) \"blac"
 #"k\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #"
 #"(struct:point 0 80) #(struct:point 400 80) \"black\") #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 120"
 #") #(struct:point 400 120) \"black\") #(struct:translate 0 0 #(struct"
 #":overlay #(struct:line-segment #(struct:point 0 160) #(struct:point "
 #"400 160) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct"
 #":line-segment #(struct:point 0 20"
 #"0) #(struct:point 400 200) \"black\") #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:line-segment #(struct:point 0 240) #(struct:point"
 #" 400 240) \"black\") #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:line-segment #(struct:point 0 280) #(struct:point 400 280) \"black"
 #"\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #("
 #"struct:point 0 320) #(struct:point 400 320) \"black\") #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 36"
 #"0) #(struct:point 400 360) \"black\") #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:line-segment #(struct:point 0 400) #(struct:point"
 #" 400 400) \"black\") #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:line-segment #(struct:point 0 440) #(struct:point 400 440) \"black"
 #"\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #("
 #"struct:point 0 480) #(struct:point 400 480) \"black\") #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 52"
 #"0) #(struct:point 400 520) \"black\") #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:line-segment #(struct:point 0 560) #(struct:point"
 #" 400 560) \"black\") #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:line-segment #(struct:point 0 600) #(struct:point 400 600) \"black"
 #"\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #("
 #"struct:point 0 640) #(struct:point 400 640) \"black\") #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 68"
 #"0) #(struct:point 400 680) \"black\") #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:line-segment #(struct:point 0 720) #(struct:point"
 #" 400 720) \"black\") #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:line-segment #(struct:point 0 760) #(struct:point 400 760) \"black"
 #"\") #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-poin"
 #"t 0 0 10 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) 255 \"white\")"
 #"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"
 #")))))) #(struct:bb 40 80 4) #f)"
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 5 #"-1000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"scale"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 6           4 21 6886
(
 #"(#(struct:scale 1/10 1/10 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 160 40 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #"
 #"(struct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(str"
 #"uct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0))"
 #" outline #(struct:pen \"black\" 2 solid round round)))))) #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pu"
 #"lled-point 0 0 40 40 0 0) #(struct"
 #":pulled-point 0 0 0 40 0 0)) 255 \"orange\"))))) #(struct:translate "
 #"0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 400 0) #(struc"
 #"t:point 400 800) #(struct:point 0 800)) #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 200 40 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 40 0) #("
 #"struct:point 40 40) #(struct:point 0 40)) #(struct:translate 0 0 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 "
 #"0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 4"
 #"0 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outline #(struct:pen "
 #"\"black\" 2 solid round round)))))) #(struct:translate 0 0 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0"
 #" 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"orange\"))))) #(struc"
 #"t:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 40"
 #"0 0) #(struct:point 400 800) #(struct:point 0 800)) #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:translate 200 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:poi"
 #"nt 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(struct:transl"
 #"ate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-"
 #"point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outline #("
 #"struct:pen \"black\" 2 solid round round)))))) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point "
 #"0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"orange\"))"
 #"))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(stru"
 #"ct:point 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 240 40 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) "
 #"#(struct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(s"
 #"truct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(st"
 #"ruct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)"
 #") outline #(struct:pen \"black\" 2 solid round round)))))) #(struct:"
 #"translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:p"
 #"ulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 "
 #"\"orange\"))))) #(struct:translate 0 0 #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:line-segment #(struct:point 40 0) #(struct:point"
 #" 40 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct"
 #":line-segment #(struct:point 80 0) #(struct:point 80 800) \"black\")"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 120 0) #(struct:point 120 800) \"black\") #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:line-segment #(struct:point 160 0) "
 #"#(struct:point 160 800) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 200 0) #(struct:point 20"
 #"0 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 240 0) #(struct:point 240 800) \"black\")"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 280 0) #(struct:point 280 800) \"black\") #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:line-segment #(struct:point 320 0) "
 #"#(struct:point 320 800) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 360 0) #(struct:point 36"
 #"0 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 0 40) #(struct:point 400 40) \"black\") #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(struc"
 #"t:point 0 80) #(struct:point 400 80) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 120) #(st"
 #"ruct:point 400 120) \"black\") #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 0 160) #(struct:point 400 16"
 #"0) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-"
 #"segment #(struct:point 0 200) #(struct:point 400 200) \"black\") #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 0 240) #(struct:point 400 240) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 280) #(st"
 #"ruct:point 400 280) \"black\") #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 0 320) #(struct:point 400 32"
 #"0) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-"
 #"segment #(struct:point 0 360) #(struct:point 400 360) \"black\") #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 0 400) #(struct:point 400 400) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 440) #(st"
 #"ruct:point 400 440) \"black\") #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 0 480) #(struct:point 400 48"
 #"0) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-"
 #"segment #(struct:point 0 520) #(struct:point 400 520) \"black\") #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 0 560) #(struct:point 400 560) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 600) #(st"
 #"ruct:point 400 600) \"black\") #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:line-segment #(struct:point 0 640) #(struct:point 400 64"
 #"0) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-"
 #"segment #(struct:point 0 680) #(struct:point 400 680) \"black\") #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:"
 #"point 0 720) #(struct:point 400 720) \"black\") #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:line-segment #(struct:point 0 760) #(st"
 #"ruct:point 400 760) \"black\") #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 20 0 0) #(struct:pulled-point 0 "
 #"0 0 20 0 0)) 255 \"white\"))))))))))))))))))))))))))))))))))))))))))"
 #"))))))))))))))))))))))))))))))))) #(struct:bb 40 80 8) #f)"
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 6 #"-10000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"scale"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 6           4 21 6877
(
 #"(#(struct:scale 1/10 1/10 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 120 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #("
 #"struct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(stru"
 #"ct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) "
 #"outline #(struct:pen \"black\" 2 solid round round)))))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pul"
 #"led-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \""
 #"pink\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0"
 #") #(struct:point 400 0) #(struct:point 400 800) #(struct:point 0 800"
 #")) #(struct:translate 0 0 #(struct:overlay #(struct:translate 160 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:poin"
 #"t 0 0) #(struct:point 40 0) #(struct:point 40 40) #(struct:point 0 4"
 #"0)) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 "
 #"0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 "
 #"40 0 0)) outline #(struct:pen \"black\" 2 solid round round)))))) #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(s"
 #"truct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0"
 #")) 255 \"pink\"))))) #(struct:translate 0 0 #(struct:crop (#(struct:"
 #"point 0 0) #(struct:point 400 0) #(struct:point 400 800) #(struct:po"
 #"int 0 800)) #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 160 40 #(struct:overlay #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 40 0) #(struct:point 40 40) #(struct"
 #":point 0 40)) #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-po"
 #"int 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid round roun"
 #"d)))))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 "
 #"0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 "
 #"0 0 40 0 0)) 255 \"pink\"))))) #(struct:translate 0 0 #(struct:crop "
 #"(#(struct:point 0 0) #(struct:point 400 0) #(struct:point 400 800) #"
 #"(struct:point 0 800)) #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 200 40 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":crop (#(struct:point 0 0) #(struct:point 40 0) #(struct:point 40 40"
 #") #(struct:point 0 40)) #(struct:translate 0 0 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct"
 #":pulled-point 0 0 0 40 0 0)) outline #(struct:pen \"black\" 2 solid "
 #"round round)))))) #(struct:translate 0 0 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0) #(struct:pulle"
 #"d-point 0 0 0 40 0 0)) 255 \"pink\"))))) #(struct:translate 0 0 #(st"
 #"ruct:translate 0 0 #(struct:overlay #(struct:line-segment #(struct:p"
 #"oint 40 0) #(struct:point 40 800) \"black\") #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:line-segment #(struct:point 80 0) #(struct"
 #":point 80 800) \"black\") #(struct:translate 0 0 #(struct:overlay #("
 #"struct:line-segment #(struct:point 120 0) #(struct:point 120 800) \""
 #"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segme"
 #"nt #(struct:point 160 0) #(struct:point 160 800) \"black\") #(struct"
 #":translate 0 0 #(struct:overlay #(struct:line-segment #(struct:point"
 #" 200 0) #(struct:point 200 800) \"black\") #(struct:translate 0 0 #("
 #"struct:overlay #(struct:line-segment #(struct:point 240 0) #(struct:"
 #"point 240 800) \"black\") #(struct:translate 0 0 #(struct:overlay #("
 #"struct:line-segment #(struct:point 280 0) #(struct:point 280 800) \""
 #"black\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segme"
 #"nt #(struct:point 320 0) #(struct:point 320 800) \"black\") #(struct"
 #":translate 0 0 #(struct:overlay #(struct:line-segment #(struct:point"
 #" 360 0) #(struct:point 360 800) \"black\") #(struct:translate 0 0 #("
 #"struct:overlay #(struct:line-segment #(struct:point 0 40) #(struct:p"
 #"oint 400 40) \"black\") #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:line-segment #(struct:point 0 80) #(struct:point 400 80) \"blac"
 #"k\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #"
 #"(struct:point 0 120) #(struct:point 400 120) \"black\") #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 1"
 #"60) #(struct:point 400 160) \"black\") #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:line-segment #(struct:point 0 200) #(struct:poin"
 #"t 400 200) \"black\") #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:line-segment #(struct:point 0 240) #(struct:point 400 240) \"blac"
 #"k\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #"
 #"(struct:point 0 280) #(struct:point 400 280) \"black\") #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 3"
 #"20) #(struct:point 400 320) \"black\") #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:line-segment #(struct:point 0 360) #(struct:poin"
 #"t 400 360) \"black\") #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:line-segment #(struct:point 0 400) #(struct:point 400 400) \"blac"
 #"k\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #"
 #"(struct:point 0 440) #(struct:point 400 440) \"black\") #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 4"
 #"80) #(struct:point 400 480) \"black\") #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:line-segment #(struct:point 0 520) #(struct:poin"
 #"t 400 520) \"black\") #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:line-segment #(struct:point 0 560) #(struct:point 400 560) \"blac"
 #"k\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #"
 #"(struct:point 0 600) #(struct:point 400 600) \"black\") #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 6"
 #"40) #(struct:point 400 640) \"black\") #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:line-segment #(struct:point 0 680) #(struct:poin"
 #"t 400 680) \"black\") #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:line-segment #(struct:point 0 720) #(struct:point 400 720) \"blac"
 #"k\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #"
 #"(struct:point 0 760) #(struct:point 400 760) \"black\") #(struct:tra"
 #"nslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(st"
 #"ruct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 20 0 0)"
 #" #(struct:pulled-point 0 0 0 20 0 0)) 255 \"white\")))))))))))))))))"
 #")))))))))))))))))))))))))))))))))))))))))))))))))))))))))) #(struct:"
 #"bb 40 80 8) #f)"
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 5 #"-1000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"scale"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 6           4 21 6873
(
 #"(#(struct:scale 1/10 1/10 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 400 0) #(struct:point 400 800) #(struct:point 0 800)) #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 160 40 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #"
 #"(struct:point 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(str"
 #"uct:pulled-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0))"
 #" outline #(struct:pen \"black\" 2 solid round round)))))) #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pu"
 #"lled-point 0 0 40 40 0 0) #(struct"
 #":pulled-point 0 0 0 40 0 0)) 255 \"red\"))))) #(struct:translate 0 0"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 400 0) #(struct:p"
 #"oint 400 800) #(struct:point 0 800)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 200 40 #(struct:overlay #(struct:transla"
 #"te 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 40 0) #(str"
 #"uct:point 40 40) #(struct:point 0 40)) #(struct:translate 0 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 4"
 #"0 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outline #(struct:pen \"b"
 #"lack\" 2 solid round round)))))) #(struct:translate 0 0 #(struct:tra"
 #"nslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(st"
 #"ruct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 40 0 0)"
 #" #(struct:pulled-point 0 0 0 40 0 0)) 255 \"red\"))))) #(struct:tran"
 #"slate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 400 0) #"
 #"(struct:point 400 800) #(struct:point 0 800)) #(struct:translate 0 0"
 #" #(struct:overlay #(struct:translate 200 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 40 "
 #"0) #(struct:point 40 40) #(struct:point 0 40)) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point "
 #"0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outline #(struct"
 #":pen \"black\" 2 solid round round)))))) #(struct:translate 0 0 #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40"
 #" 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"red\"))))) #(str"
 #"uct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"400 0) #(struct:point 400 800) #(struct:point 0 800)) #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 240 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:p"
 #"oint 40 0) #(struct:point 40 40) #(struct:point 0 40)) #(struct:tran"
 #"slate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-p"
 #"oint 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulle"
 #"d-point 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) outline "
 #"#(struct:pen \"black\" 2 solid round round)))))) #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-poin"
 #"t 0 0 40 40 0 0) #(struct:pulled-point 0 0 0 40 0 0)) 255 \"red\")))"
 #")) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:overlay #("
 #"struct:line-segment #(struct:point 40 0) #(struct:point 40 800) \"bl"
 #"ack\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment"
 #" #(struct:point 80 0) #(struct:point 80 800) \"black\") #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 120"
 #" 0) #(struct:point 120 800) \"black\") #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:line-segment #(struct:point 160 0) #(struct:poin"
 #"t 160 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:line-segment #(struct:point 200 0) #(struct:point 200 800) \"blac"
 #"k\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #"
 #"(struct:point 240 0) #(struct:point 240 800) \"black\") #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:line-segment #(struct:point 280"
 #" 0) #(struct:point 280 800) \"black\") #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:line-segment #(struct:point 320 0) #(struct:poin"
 #"t 320 800) \"black\") #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:line-segment #(struct:point 360 0) #(struct:point 360 800) \"blac"
 #"k\") #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #"
 #"(struct:point 0 40) #(struct:point 400 40) \"black\") #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 80)"
 #" #(struct:point 400 80) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 0 120) #(struct:point 40"
 #"0 120) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 0 160) #(struct:point 400 160) \"black\")"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 0 200) #(struct:point 400 200) \"black\") #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 240) "
 #"#(struct:point 400 240) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 0 280) #(struct:point 40"
 #"0 280) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 0 320) #(struct:point 400 320) \"black\")"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 0 360) #(struct:point 400 360) \"black\") #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 400) "
 #"#(struct:point 400 400) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 0 440) #(struct:point 40"
 #"0 440) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 0 480) #(struct:point 400 480) \"black\")"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 0 520) #(struct:point 400 520) \"black\") #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 560) "
 #"#(struct:point 400 560) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 0 600) #(struct:point 40"
 #"0 600) \"black\") #(struct:translate 0 0 #(struct:overlay #(struct:l"
 #"ine-segment #(struct:point 0 640) #(struct:point 400 640) \"black\")"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:line-segment #(str"
 #"uct:point 0 680) #(struct:point 400 680) \"black\") #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:line-segment #(struct:point 0 720) "
 #"#(struct:point 400 720) \"black\") #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:line-segment #(struct:point 0 760) #(struct:point 40"
 #"0 760) \"black\") #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(stru"
 #"ct:pulled-point 0 0 10 20 0 0) #(struct:pulled-point 0 0 0 20 0 0)) "
 #"255 \"white\")))))))))))))))))))))))))))))))))))))))))))))))))))))))"
 #")))))))))))))))))))) #(struct:bb 40 80 8) #f)"
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;tetra-by-number tests"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 2 #") "
0 0 14 3 7 #"O-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 2 #") "
0 0 14 3 7 #"L-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 2 #") "
0 0 14 3 7 #"J-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 2 #") "
0 0 14 3 7 #"I-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 2 #") "
0 0 14 3 7 #"T-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 2 #") "
0 0 14 3 7 #"Z-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 2 #") "
0 0 14 3 7 #"S-tetra"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"LoPit"
0 0 24 3 2 #")("
0 0 14 3 2 #"or"
0 0 24 3 1 #"("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"array index out of bounds\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; tetra->blocks"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"tetra->blocks"
0 0 24 3 1 #" "
0 0 14 3 7 #"O-tetra"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"tetra->blocks"
0 0 24 3 1 #" "
0 0 14 3 7 #"S-tetra"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"make-block"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;update-tetra-pos"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"update-tetra-pos"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"move-tetra"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"tetra-by-number"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 5 #"LoPit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 6 #"-10000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-tetra"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pink\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"-10000"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; block-rotate-ccw"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; (check-expect (block-rotate-ccw"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0           0
